{"version":3,"sources":["../src/index.ts"],"names":["makeId","text","possible","i","charAt","Math","floor","random","length","createArr","runs","view","urls","viewRuns","flatten","url","map","run","Array","psiApiFetch","waitAmount","verbose","wait","ms","Promise","res","setTimeout","rej","resolve","json","lighthouseResult","audits","base","auditConstants","auditList","result","Object","keys","reduce","auditResult","key","split","console","table","error","message","log","chalk","bold","red","yellow","e","getResults","arr","api","previous","curr","index","collection","apiKey","fakeUrlChange","green","profiler","stripIndents","toString","results","module","exports"],"mappings":"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","sourcesContent":["import chalk from 'chalk'\nimport { stripIndents } from 'common-tags'\nimport fetch from 'isomorphic-fetch'\nimport { fill, getOr, map, pick, pipe } from 'lodash/fp'\nimport flatten from 'ramda/src/flatten'\n\nexport interface IOptions {\n  runs?: number,\n  wait?: number,\n  view?: 'mobile' | 'both' | 'desktop',\n  api?: string,\n  verbose?: boolean,\n}\n\ninterface ICreateArr<T> {\n  runs: number,\n  view: IOptions['view'],\n  urls: T[],\n}\n\nfunction makeId() {\n  let text: string = ''\n  const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n\n  for (let i = 0; i < 6; i++) {\n    text += possible.charAt(\n      Math.floor(\n        Math.random() * possible.length\n      )\n    )\n  }\n\n  return text\n}\n\nconst createArr = <T extends any[]>({ runs, view, urls }: ICreateArr<T>) => {\n  const viewRuns =\n    view === 'both' ? ['desktop', 'mobile']\n    : view === 'mobile' ? ['mobile'] : ['desktop']\n\n  return pipe(\n    fill(0, runs, urls),\n    flatten,\n    map(url => viewRuns.map(run => `${url}&strategy=${run}`)),\n    flatten\n  )(Array(runs))\n}\n\nexport async function psiApiFetch(url: string, waitAmount: number, verbose: boolean) {\n  const wait = (ms: number) => new Promise(res => setTimeout(res, ms))\n\n  return new Promise(async (res, rej) => {\n    try {\n      const resolve = await fetch(`https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=${url}`)\n      const json = await resolve.json()\n\n      if (\n        json &&\n        json.lighthouseResult &&\n        json.lighthouseResult.audits\n      ) {\n        const base = json.lighthouseResult\n        const auditConstants = ['score', 'displayValue']\n        const auditList = {\n          'categories.performance| Final Score:': null,\n          'audits.interactive| TTI:': null,\n          'audits.speed-index| Speed Index:': null,\n          'audits.first-contentful-paint| First Contentful Paint:': null,\n          'audits.first-cpu-idle| CPU Idle:': null,\n          'audits.first-meaningful-paint| Meaningful Paint:': null,\n          'audits.time-to-first-byte| Time To First Byte (TTFB):': null,\n          'audits.uses-long-cache-ttl| Uses Long Cache TTL:': null,\n          'audits.estimated-input-latency| Estimated Input Latency:': null,\n          'audits.bootup-time| JS Bootup Time:': null,\n          'audits.total-byte-weight| Total Byte Weight:': null,\n          'audits.mainthread-work-breakdown| Main Thread Work Time:': null,\n        }\n  \n        const result = Object.keys(auditList).reduce((auditResult, key) => ({\n          ...auditResult,\n          [key.split('|')[1]]: pipe(\n            getOr('Data not found', key.split('|')[0]),\n            pick(auditConstants),\n          )(base),\n        }), {})\n  \n        if (verbose) {\n          console.table(result)\n        }\n  \n        await wait(waitAmount)\n  \n        res(result)\n      } else if (json.error && json.error.message) {\n        console.log(\n          chalk.bold.red('ERROR:'),\n          json.error.message\n        )\n      } else {\n        console.log(\n          chalk.bold.yellow('WARNING:'),\n          'Something went wrong, try using a different URL, or add more repeat runs.'\n        )\n      }\n    } catch(e) {\n      rej(e)\n    }\n  })\n}\n\nasync function getResults<T extends string[]>(arr: T, waitAmount: number, api: string, verbose: boolean) {\n  return arr.reduce(async (previous, curr, index) => {\n    const collection = await previous\n    const apiKey = api !== '' ? `&key=${api}` : ''\n    const fakeUrlChange = `${curr}${apiKey}&${makeId()}=${makeId()}`\n\n    if (verbose) {\n      console.log(\n        chalk.bold.green(`Test #${index + 1}`),\n        `${curr}`\n      )\n    }\n\n    return ({\n      ...collection,\n      [`${curr}-${index}`]: await psiApiFetch(fakeUrlChange, waitAmount, verbose),\n    })\n  }, {})\n}\n\n/**\n * \n * @typedef {Object} Options\n * @property {number} runs - How many times to run PSI test on list of urls...\n * @property {number} wait - How many ms to wait before running next test (useful if no api key)...\n * @property {('mobile'|'desktop'|'both')} view - Which view to run tests for...\n * @property {string} api - Google API key\n * @property {boolean} verbose - Output console.log after every test...\n */\n\n/**\n * @param {...Options} options - `Object { runs, wait, view, api, verbose }`\n * @param {array} urls - List of urls to provide the runner...\n * @returns {Promise} promise\n */\nexport default async function profiler<T extends any[]>({\n  runs = 1,\n  wait = 2000,\n  view = 'both',\n  api = '',\n  verbose = false,\n}: IOptions, ...urls: T) {\n  // normalize runs for later, array of all tests is\n  // how many runs * how many urls to test\n  runs = runs * urls.length\n\n  if (verbose) {\n    console.log(stripIndents`\n      Runs: ${chalk.bold.yellow(runs.toString())}\n      Waiting: ${chalk.bold.yellow(wait.toString())}\n      Testing View: ${chalk.bold.yellow(view)}\n    `)\n  }\n\n  const results = await getResults(\n    createArr({ runs, view, urls }),\n    wait,\n    api,\n    verbose\n  )\n\n  return results\n}\n\n// I want CommonJS primary import to be profiler\nmodule.exports = profiler\n"],"file":"index.js"}