{"version":3,"sources":["../src/profiler.ts"],"names":["console","log","chalk","bold","blue","figlet","textSync","font","horizontalLayout","validURL","str","pattern","RegExp","test","isNumber","n","isNaN","parseFloat","isFinite","processUrl","url","options","runs","wait","view","verbose","program","api","version","command","option","action","parse","process","argv"],"mappings":"AAAA;;;AAEA;;AACA;;AACA;;AACA;;AAEA;;;;AAEA;AACAA,OAAO,CAACC,GAAR,CACEC,eAAMC,IAAN,CAAWC,IAAX,CACEC,gBAAOC,QAAP,CAAgB,cAAhB,EAAgC;AAAEC,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,gBAAgB,EAAE;AAAxC,CAAhC,CADF,CADF;;AAMA,SAASC,QAAT,CAAkBC,GAAlB,EAA+B;AAC7B,QAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAW,sBACzB,kDADyB,GAEzB,6BAFyB,GAGzB,iCAHyB,GAIzB,0BAJyB,GAKzB,oBALc,EAKO,GALP,CAAhB;;AAMA,MAAG,CAACD,OAAO,CAACE,IAAR,CAAaH,GAAb,CAAJ,EAAuB;AACrB,WAAO,KAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF;;AAED,SAASI,QAAT,CAAkBC,CAAlB,EAAsC;AACpC,MAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AACzB,WAAO,CAACC,KAAK,CAACC,UAAU,CAACF,CAAD,CAAX,CAAN,IAA0B,CAACC,KAAK,CAACC,UAAU,CAACF,CAAD,CAAX,CAAN,IAAyBG,QAAQ,CAACD,UAAU,CAACF,CAAD,CAAX,CAAlE;AACD,GAFD,MAEO;AACL,WAAOG,QAAQ,CAACH,CAAD,CAAf;AACD;AACF;;AAED,eAAeI,UAAf,CAA0BC,GAA1B,EAAuC;AACrC,QAAMC,OAAiB,GAAG;AACxBC,IAAAA,IAAI,EAAE,CADkB;AAExBC,IAAAA,IAAI,EAAE,IAFkB;AAGxBC,IAAAA,IAAI,EAAE,MAHkB;AAIxBC,IAAAA,OAAO,EAAE;AAJe,GAA1B;;AAOA,MAAI,CAACL,GAAL,EAAU;AACR,WAAOpB,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAP;AACD,GAFD,MAEO,IAAI,CAACQ,QAAQ,CAACW,GAAD,CAAb,EAAoB;AACzB,WAAOpB,OAAO,CAACC,GAAR,CAAY,0BAAZ,CAAP;AACD;;AAED,MAAIyB,mBAAQF,IAAR,IAAgB,yBAAyBX,IAAzB,CAA8Ba,mBAAQF,IAAtC,CAApB,EAAiE;AAC/DH,IAAAA,OAAO,CAACG,IAAR,GAAeE,mBAAQF,IAAvB;AACD;;AAED,MAAIE,mBAAQJ,IAAR,IAAgBR,QAAQ,CAACY,mBAAQJ,IAAT,CAAxB,IAA0CI,mBAAQJ,IAAR,GAAe,CAA7D,EAAgE;AAC9DD,IAAAA,OAAO,CAACC,IAAR,GAAeI,mBAAQJ,IAAvB;AACD;;AAED,MAAII,mBAAQC,GAAR,IAAe,CAACb,QAAQ,CAACY,mBAAQC,GAAT,CAA5B,EAA2C;AACzCN,IAAAA,OAAO,CAACM,GAAR,GAAcD,mBAAQC,GAAtB;AACD;;AAED,QAAM,oBAASN,OAAT,EAAkBD,GAAlB,CAAN;AACD;;AAEDM,mBACGE,OADH,CACW,OADX,EAEGC,OAFH,CAEW,OAFX,EAEoB,qBAFpB,EAGGC,MAHH,CAGU,gBAHV,EAG4B,gBAH5B,EAIGA,MAJH,CAIU,kBAJV,EAI8B,oBAJ9B,EAIoD,0BAJpD,EAIgF,MAJhF,EAKGA,MALH,CAKU,oBALV,EAKgC,uCALhC,EAMGC,MANH,CAMUZ,UANV;;AAQAO,mBAAQM,KAAR,CAAcC,OAAO,CAACC,IAAtB","sourcesContent":["#!/usr/bin/env node\n\nimport chalk from 'chalk'\nimport clear from 'clear'\nimport program from 'commander'\nimport figlet from 'figlet'\n\nimport profiler, { IOptions } from './index'\n\nclear()\nconsole.log(\n  chalk.bold.blue(\n    figlet.textSync('profiler-cli', { font: 'AMC 3 Line', horizontalLayout: 'full' })\n  )\n)\n\nfunction validURL(str: string) {\n  const pattern = new RegExp('^(https?:\\\\/\\\\/)?'+\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+\n    '(\\\\#[-a-z\\\\d_]*)?$','i')\n  if(!pattern.test(str)) {\n    return false\n  } else {\n    return true\n  }\n}\n\nfunction isNumber(n: string | number) {\n  if (typeof n === 'string') {\n    return !isNaN(parseFloat(n)) && (!isNaN(parseFloat(n)) && isFinite(parseFloat(n)))\n  } else {\n    return isFinite(n)\n  }\n}\n\nasync function processUrl(url: string) {\n  const options: IOptions = {\n    runs: 1,\n    wait: 1000,\n    view: 'both',\n    verbose: true,\n  }\n\n  if (!url) {\n    return console.log('You must specify a url')\n  } else if (!validURL(url)) {\n    return console.log('Please enter a valid url')\n  }\n\n  if (program.view && /^(mobile|desktop|both)/.test(program.view)) {\n    options.view = program.view\n  }\n\n  if (program.runs && isNumber(program.runs) && program.runs > 0) {\n    options.runs = program.runs\n  }\n\n  if (program.api && !isNumber(program.api)) {\n    options.api = program.api\n  }\n\n  await profiler(options, url)\n}\n\nprogram\n  .version('0.1.0')\n  .command('<url>', 'URL to benchmark on')\n  .option('-a --api <key>', 'Google API key')\n  .option('-v --view [view]', 'Which view to test', /^(mobile|desktop|both)$/i, 'both')\n  .option('-r --runs <number>', 'How many times to run profiler on URL')\n  .action(processUrl)\n\nprogram.parse(process.argv)\n"],"file":"profiler.js"}